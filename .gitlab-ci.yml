---
variables:
  JUNIT_TEST_REPORT: test_report_${CI_COMMIT_SHORT_SHA}.html
  COVERAGE_TEST_REPORT: coverage_report_${CI_COMMIT_SHORT_SHA}
  PYTHON_VERSION:
    value: "3.10"
    options:
      - "3.10"
      - "3.11"
      - "3.12"
    description: Python version to use

stages:
  - validate
  - test
  - build

validate-yaml:
  stage: validate
  image: alpine
  script:
    - apk add yamllint
    - cd $CI_PROJECT_DIR
    - yamllint .
  rules:
    - changes:
        - "*.yml"
        - "*.yaml"

.python:
  image:
    name: python:${PYTHON_VERSION}-slim
    pull_policy: if-not-present
  before_script:
    - pip install uv
  allow_failure: false

Code-Check:
  extends: .python
  stage: validate
  script:
    - cd $CI_PROJECT_DIR
    - uv run mypy --check .
    - uv run ruff check .
  rules:
    - if: $CI_JOB_MANUAL
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - src/**/*.py
        - tools/*.py

Check-HLA-Modified-Dates:
  stage: validate
  extends: .python
  variables:
    PYTHONPATH: "${CI_BUILDS_DIR}/src"
  script:
    - apt update
    - apt install git-restore-mtime -y --no-install-recommends
    - cd $CI_PROJECT_DIR
    - uv run tools/check_date_modified.py check-dates
  rules:
    - if: $CI_JOB_MANUAL
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - src/**/*.csv
        - src/**/*.mtime

Unit-Tests:
  extends: .python
  stage: test
  script:
    - cd $CI_PROJECT_DIR
    - uv run pytest
      -vra
      --html=${JUNIT_TEST_REPORT}
      --self-contained-html
      --cov-report=html:${COVERAGE_TEST_REPORT}
      --cov-report=term
      --junitxml=pytest.xml
  parallel:
    matrix:
      - PYTHON_VERSION:
          - "3.10"
          - "3.11"
          - "3.12"
  coverage: '/^TOTAL.+?(\d+\%)$/'
  interruptible: true
  artifacts:
    reports:
      junit: pytest.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - ${COVERAGE_TEST_REPORT}/*
      - ${JUNIT_TEST_REPORT}
