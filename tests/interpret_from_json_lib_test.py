from datetime import datetime
from typing import Final, Optional

import pytest

from hla_algorithm.interpret_from_json_lib import HLAInput, HLAMatchAdaptor, HLAResult
from hla_algorithm.models import (
    HLACombinedStandard,
    HLAInterpretation,
    HLAMatchDetails,
    HLAMismatch,
    HLAProteinPair,
    HLASequence,
    HLAStandard,
)
from hla_algorithm.utils import HLA_LOCUS


def dummy_hla_sequence(locus: HLA_LOCUS) -> HLASequence:
    return HLASequence(
        two=(2, 2, 1, 2),  # "CCAC"
        intron=(),
        three=(1, 4, 4, 2, 8),  # "AGGCT"
        name="dummy_seq",
        locus=locus,
        num_sequences_used=1,
    )


def dummy_matches(locus: HLA_LOCUS) -> dict[HLACombinedStandard, HLAMatchDetails]:
    return {
        HLACombinedStandard(
            standard_bin=(1, 4, 9, 4),
            possible_allele_pairs=((f"{locus}*01:01:01", f"{locus}*02:02:02"),),
        ): HLAMatchDetails(
            mismatches=[
                HLAMismatch(index=55, sequence_base="A", standard_base="G"),
                HLAMismatch(index=62, sequence_base="A", standard_base="R"),
            ]
        ),
        HLACombinedStandard(
            standard_bin=(1, 4, 9, 2),
            possible_allele_pairs=((f"{locus}*10:01:15", f"{locus}*20:02:03"),),
        ): HLAMatchDetails(
            mismatches=[
                HLAMismatch(index=45, sequence_base="T", standard_base="C"),
                HLAMismatch(index=48, sequence_base="R", standard_base="C"),
            ]
        ),
        HLACombinedStandard(
            standard_bin=(2, 4, 9, 2),
            possible_allele_pairs=((f"{locus}*10:01:10", f"{locus}*20:22:20"),),
        ): HLAMatchDetails(
            mismatches=[
                HLAMismatch(index=45, sequence_base="T", standard_base="C"),
                HLAMismatch(index=57, sequence_base="R", standard_base="Y"),
                HLAMismatch(index=122, sequence_base="R", standard_base="G"),
            ]
        ),
        HLACombinedStandard(
            standard_bin=(2, 4, 10, 2),
            possible_allele_pairs=(
                (f"{locus}*10:01:10", f"{locus}*20:01"),
                (f"{locus}*10:01:10", f"{locus}*111:22:22"),
            ),
        ): HLAMatchDetails(
            mismatches=[
                HLAMismatch(index=100, sequence_base="A", standard_base="T"),
                HLAMismatch(index=150, sequence_base="T", standard_base="G"),
            ]
        ),
    }


DUMMY_FREQUENCIES: Final[dict[HLAProteinPair, int]] = {
    HLAProteinPair(
        first_field_1="01",
        first_field_2="01",
        second_field_1="02",
        second_field_2="02",
    ): 150,
    HLAProteinPair(
        first_field_1="10",
        first_field_2="01",
        second_field_1="20",
        second_field_2="02",
    ): 1500,
}

MATCHES_FOR_B5701_CASES: dict[HLACombinedStandard, HLAMatchDetails] = {
    HLACombinedStandard(
        standard_bin=(1, 4, 9, 4),
        possible_allele_pairs=(("B*57:01:01", "B*57:01:01"),),
    ): HLAMatchDetails(
        mismatches=[HLAMismatch(index=3, sequence_base="A", standard_base="W")]
    ),
    HLACombinedStandard(
        standard_bin=(1, 4, 9, 2),
        possible_allele_pairs=(("B*57:01:15", "B*57:01:03"),),
    ): HLAMatchDetails(
        mismatches=[HLAMismatch(index=7, sequence_base="R", standard_base="W")]
    ),
    HLACombinedStandard(
        standard_bin=(2, 4, 9, 2),
        possible_allele_pairs=(("B*57:02:33", "B*56:04:22"),),
    ): HLAMatchDetails(
        mismatches=[
            HLAMismatch(index=33, sequence_base="A", standard_base="C"),
            HLAMismatch(index=36, sequence_base="A", standard_base="G"),
            HLAMismatch(index=122, sequence_base="C", standard_base="R"),
        ]
    ),
    HLACombinedStandard(
        standard_bin=(2, 4, 10, 2),
        possible_allele_pairs=(
            ("B*57:02:10", "B*57:01:01:03N"),
            ("B*57:04:10", "B*57:01:22"),
        ),
    ): HLAMatchDetails(
        mismatches=[HLAMismatch(index=100, sequence_base="A", standard_base="T")],
    ),
}

FREQUENCIES_FOR_B5701_CASES: dict[HLAProteinPair, int] = {
    HLAProteinPair(
        first_field_1="01",
        first_field_2="01",
        second_field_1="02",
        second_field_2="02",
    ): 150,
    HLAProteinPair(
        first_field_1="57",
        first_field_2="01",
        second_field_1="57",
        second_field_2="01",
    ): 1500,
}

# The first of these has "forgiving distance" 1 to the sequence generated by
# dummy_hla_sequence("B").
B5701_CASE_STANDARDS: list[HLAStandard] = [
    HLAStandard(
        allele="B*57:01:01",
        two=(2, 4, 1, 2),
        three=(1, 4, 4, 2, 8),
    ),
    HLAStandard(
        allele="B*57:01:02",
        two=(2, 1, 1, 2),
        three=(1, 4, 8, 2, 8),
    ),
    HLAStandard(
        allele="B*57:01:03",
        two=(2, 5, 3, 2),
        three=(1, 4, 8, 10, 9),
    ),
]


@pytest.mark.parametrize(
    "seq1, seq2, expected_result",
    [
        pytest.param(
            "A" * 787,
            None,
            [],
            id="no_errors",
        ),
        pytest.param(
            "A" * 270,
            "C" * 276,
            ["Wrong number of sequences (needs 1)"],
            id="wrong_number_of_sequences",
        ),
        pytest.param(
            "A" * 850,
            None,
            ["Sequence is the wrong size (should be 787)"],
            id="bad_length",
        ),
        pytest.param(
            "A" * 200 + "_" + "C" * 586,
            None,
            ["Sequence has invalid characters"],
            id="invalid_characters",
        ),
        pytest.param(
            "A" * 200 + "_" + "C" * 69,
            "C" * 276,
            [
                "Wrong number of sequences (needs 1)",
                "Sequence has invalid characters",
            ],
            id="wrong_number_of_sequences_and_invalid_characters",
        ),
        pytest.param(
            "A" * 500 + "_" + "C" * 100,
            None,
            [
                "Sequence is the wrong size (should be 787)",
                "Sequence has invalid characters",
            ],
            id="bad_length_and_invalid_characters",
        ),
    ],
)
def test_hla_input_check_sequences_locus_a(
    seq1: str,
    seq2: Optional[str],
    expected_result: list[str],
):
    hla_input: HLAInput = HLAInput(seq1=seq1, seq2=seq2, locus="A")
    result: list[str] = hla_input.check_sequences()
    assert result == expected_result


@pytest.mark.parametrize(
    "seq1, seq2, expected_result",
    [
        pytest.param(
            "A" * 270,
            "C" * 276,
            [],
            id="no_errors",
        ),
        pytest.param(
            "A" * 787,
            None,
            ["Wrong number of sequences (needs 2)"],
            id="wrong_number_of_sequences",
        ),
        pytest.param(
            "A" * 850,
            "C" * 276,
            ["Sequence 1 is the wrong size (should be 270)"],
            id="bad_length_seq1",
        ),
        pytest.param(
            "A" * 270,
            "C" * 300,
            ["Sequence 2 is the wrong size (should be 276)"],
            id="bad_length_seq2",
        ),
        pytest.param(
            "A" * 200,
            "C" * 277,
            [
                "Sequence 1 is the wrong size (should be 270)",
                "Sequence 2 is the wrong size (should be 276)",
            ],
            id="bad_length_both_sequences",
        ),
        pytest.param(
            "A" * 200 + "_" + "C" * 69,
            "C" * 276,
            ["Sequence has invalid characters"],
            id="invalid_characters_seq1",
        ),
        pytest.param(
            "A" * 270,
            "C" * 200 + "Q" + "C" * 75,
            ["Sequence has invalid characters"],
            id="invalid_characters_seq2",
        ),
        pytest.param(
            "A" * 200 + "_" + "C" * 69,
            "C" * 200 + "Q" + "C" * 75,
            ["Sequence has invalid characters"],
            id="invalid_characters_both_sequences",
        ),
        pytest.param(
            "A" * 200 + "_" + "C" * 69,
            None,
            [
                "Wrong number of sequences (needs 2)",
                "Sequence has invalid characters",
            ],
            id="wrong_number_of_sequences_and_invalid_characters",
        ),
        pytest.param(
            "A" * 500 + "_" + "G" * 200,
            "C" * 276,
            [
                "Sequence 1 is the wrong size (should be 270)",
                "Sequence has invalid characters",
            ],
            id="bad_length_seq1_and_invalid_characters",
        ),
        pytest.param(
            "A" * 270,
            "C" * 200 + "_" + "C" * 74,
            [
                "Sequence 2 is the wrong size (should be 276)",
                "Sequence has invalid characters",
            ],
            id="bad_length_seq2_and_invalid_characters",
        ),
        pytest.param(
            "A" * 200 + "_" + "A" * 68,
            "C" * 277,
            [
                "Sequence 1 is the wrong size (should be 270)",
                "Sequence 2 is the wrong size (should be 276)",
                "Sequence has invalid characters",
            ],
            id="bad_length_both_sequences_and_invalid_characters",
        ),
    ],
)
def test_hla_input_check_sequences_locus_bc(
    seq1: str,
    seq2: Optional[str],
    expected_result: list[str],
):
    for locus in ("B", "C"):
        hla_input: HLAInput = HLAInput(seq1=seq1, seq2=seq2, locus=locus)
        result: list[str] = hla_input.check_sequences()
        assert result == expected_result


def test_hla_input_hla_sequence_locus_a():
    hla_input: HLAInput = HLAInput(
        seq1="A" * 270 + "C" * 241 + "G" * 276,
        seq2=None,
        locus="A",
    )
    expected_result: HLASequence = HLASequence(
        two=(1,) * 270,
        intron=(2,) * 241,
        three=(4,) * 276,
        name="input_sequence",
        locus="A",
        num_sequences_used=1,
    )
    assert hla_input.hla_sequence() == expected_result


def test_hla_input_hla_sequence_locus_bc():
    for locus in ("B", "C"):
        hla_input: HLAInput = HLAInput(
            seq1="A" * 270,
            seq2="G" * 276,
            locus=locus,
        )
        expected_result: HLASequence = HLASequence(
            two=(1,) * 270,
            intron=(),
            three=(4,) * 276,
            name="input_sequence",
            locus=locus,
            num_sequences_used=2,
        )
        assert hla_input.hla_sequence() == expected_result


@pytest.mark.parametrize(
    "raw_mismatches,raw_expected_result",
    [
        pytest.param([], [], id="no_mismatches"),
        pytest.param(
            [HLAMismatch(index=100, sequence_base="A", standard_base="T")],
            ["100:A->T"],
            id="single_mismatch",
        ),
        pytest.param(
            [
                HLAMismatch(index=100, sequence_base="A", standard_base="T"),
                HLAMismatch(index=150, sequence_base="T", standard_base="G"),
                HLAMismatch(index=157, sequence_base="C", standard_base="R"),
            ],
            ["100:A->T", "150:T->G", "157:C->R"],
            id="multiple_mismatches",
        ),
    ],
)
def test_hla_match_adaptor_from_match_details(
    raw_mismatches: list[HLAMismatch],
    raw_expected_result: list[str],
):
    match_details: HLAMatchDetails = HLAMatchDetails(mismatches=raw_mismatches)
    expected_result: HLAMatchAdaptor = HLAMatchAdaptor(
        mismatch_count=len(raw_expected_result), mismatches=raw_expected_result
    )
    result: HLAMatchAdaptor = HLAMatchAdaptor.from_match_details(match_details)
    assert result == expected_result


@pytest.mark.parametrize(
    (
        "hla_sequence, matches, frequencies, b5701_standards, alleles_version, "
        "alleles_last_updated, expected_result"
    ),
    [
        pytest.param(
            dummy_hla_sequence("A"),
            dummy_matches("A"),
            DUMMY_FREQUENCIES,
            None,
            "v0.0.0-testing",
            datetime(2025, 8, 12, 17, 0, 0),
            HLAResult(
                seqs=["CCACAGGCT"],
                alleles_all=[
                    "A*01:01:01 - A*02:02:02",
                    "A*10:01:10 - A*20:01",
                    "A*10:01:10 - A*111:22:22",
                    "A*10:01:15 - A*20:02:03",
                ],
                alleles_clean="A*10:01 - A*20",
                alleles_for_mismatches="A*10:01:10 - A*20:01",
                mismatches=["100:A->T", "150:T->G"],
                ambiguous=True,
                homozygous=False,
                locus="A",
                alleles_version="v0.0.0-testing",
                alleles_last_updated=datetime(2025, 8, 12, 17, 0, 0),
                b5701=False,
                dist_b5701=None,
                all_mismatches={
                    "A*01:01:01 - A*02:02:02": HLAMatchAdaptor(
                        mismatch_count=2,
                        mismatches=["55:A->G", "62:A->R"],
                    ),
                    "A*10:01:15 - A*20:02:03": HLAMatchAdaptor(
                        mismatch_count=2,
                        mismatches=["45:T->C", "48:R->C"],
                    ),
                    "A*10:01:10 - A*20:22:20": HLAMatchAdaptor(
                        mismatch_count=3,
                        mismatches=["45:T->C", "57:R->Y", "122:R->G"],
                    ),
                    "A*10:01:10 - A*20:01|A*10:01:10 - A*111:22:22": HLAMatchAdaptor(
                        mismatch_count=2,
                        mismatches=["100:A->T", "150:T->G"],
                    ),
                },
            ),
            id="a_typical_case",
        ),
        pytest.param(
            dummy_hla_sequence("B"),
            MATCHES_FOR_B5701_CASES,
            FREQUENCIES_FOR_B5701_CASES,
            B5701_CASE_STANDARDS,
            "v0.0.0-testing",
            datetime(2025, 8, 12, 17, 0, 0),
            HLAResult(
                seqs=["CCAC", "AGGCT"],
                alleles_all=[
                    "B*57:01:01 - B*57:01:01",
                    "B*57:01:15 - B*57:01:03",
                    "B*57:02:10 - B*57:01:01:03N",
                    "B*57:04:10 - B*57:01:22",
                ],
                alleles_clean="B*57 - B*57:01",
                alleles_for_mismatches="B*57:01:01 - B*57:01:01",
                mismatches=["3:A->W"],
                ambiguous=False,
                homozygous=True,
                locus="B",
                alleles_version="v0.0.0-testing",
                alleles_last_updated=datetime(2025, 8, 12, 17, 0, 0),
                b5701=True,
                dist_b5701=1,
                all_mismatches={
                    "B*57:01:01 - B*57:01:01": HLAMatchAdaptor(
                        mismatch_count=1,
                        mismatches=["3:A->W"],
                    ),
                    "B*57:01:15 - B*57:01:03": HLAMatchAdaptor(
                        mismatch_count=1,
                        mismatches=["7:R->W"],
                    ),
                    "B*57:02:33 - B*56:04:22": HLAMatchAdaptor(
                        mismatch_count=3,
                        mismatches=["33:A->C", "36:A->G", "122:C->R"],
                    ),
                    "B*57:02:10 - B*57:01:01:03N|B*57:04:10 - B*57:01:22": HLAMatchAdaptor(
                        mismatch_count=1,
                        mismatches=["100:A->T"],
                    ),
                },
            ),
            id="b_typical_case",
        ),
        pytest.param(
            dummy_hla_sequence("C"),
            dummy_matches("C"),
            DUMMY_FREQUENCIES,
            None,
            "v0.0.0-testing",
            datetime(2025, 8, 12, 17, 0, 0),
            HLAResult(
                seqs=["CCAC", "AGGCT"],
                alleles_all=[
                    "C*01:01:01 - C*02:02:02",
                    "C*10:01:10 - C*20:01",
                    "C*10:01:10 - C*111:22:22",
                    "C*10:01:15 - C*20:02:03",
                ],
                alleles_clean="C*10:01 - C*20",
                alleles_for_mismatches="C*10:01:10 - C*20:01",
                mismatches=["100:A->T", "150:T->G"],
                ambiguous=True,
                homozygous=False,
                locus="C",
                alleles_version="v0.0.0-testing",
                alleles_last_updated=datetime(2025, 8, 12, 17, 0, 0),
                b5701=False,
                dist_b5701=None,
                all_mismatches={
                    "C*01:01:01 - C*02:02:02": HLAMatchAdaptor(
                        mismatch_count=2,
                        mismatches=["55:A->G", "62:A->R"],
                    ),
                    "C*10:01:15 - C*20:02:03": HLAMatchAdaptor(
                        mismatch_count=2,
                        mismatches=["45:T->C", "48:R->C"],
                    ),
                    "C*10:01:10 - C*20:22:20": HLAMatchAdaptor(
                        mismatch_count=3,
                        mismatches=["45:T->C", "57:R->Y", "122:R->G"],
                    ),
                    "C*10:01:10 - C*20:01|C*10:01:10 - C*111:22:22": HLAMatchAdaptor(
                        mismatch_count=2,
                        mismatches=["100:A->T", "150:T->G"],
                    ),
                },
            ),
            id="c_typical_case",
        ),
    ],
)
def test_hla_result_build_from_interpretation(
    hla_sequence: HLASequence,
    matches: dict[HLACombinedStandard, HLAMatchDetails],
    frequencies: dict[HLAProteinPair, int],
    b5701_standards: Optional[list[HLAStandard]],
    alleles_version: str,
    alleles_last_updated: datetime,
    expected_result: HLAResult,
):
    interp: HLAInterpretation = HLAInterpretation(
        hla_sequence=hla_sequence,
        matches=matches,
        allele_frequencies=frequencies,
        b5701_standards=b5701_standards,
    )
    result: HLAResult = HLAResult.build_from_interpretation(
        interp, alleles_version, alleles_last_updated
    )
    assert result == expected_result
